#ifndef MONSTER_BUILDER_H
#define MONSTER_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef MONSTER_READER_H
#include "monster_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __GasBoil_CommandType_formal_args , GasBoil_CommandType_enum_t v0
#define __GasBoil_CommandType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, GasBoil_CommandType, GasBoil_CommandType_enum_t)

static const flatbuffers_voffset_t __GasBoil_Message_required[] = { 0 };
typedef flatbuffers_ref_t GasBoil_Message_ref_t;
static GasBoil_Message_ref_t GasBoil_Message_clone(flatbuffers_builder_t *B, GasBoil_Message_table_t t);
__flatbuffers_build_table(flatbuffers_, GasBoil_Message, 4)

#define __GasBoil_Message_formal_args , GasBoil_CommandType_enum_t v0, int16_t v1, int16_t v2, flatbuffers_int8_vec_ref_t v3
#define __GasBoil_Message_call_args , v0, v1, v2, v3
static inline GasBoil_Message_ref_t GasBoil_Message_create(flatbuffers_builder_t *B __GasBoil_Message_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, GasBoil_Message, GasBoil_Message_file_identifier, GasBoil_Message_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, GasBoil_Message_type, GasBoil_CommandType, GasBoil_CommandType_enum_t, 1, 1, INT8_C(5), GasBoil_Message)
__flatbuffers_build_scalar_field(1, flatbuffers_, GasBoil_Message_ack, flatbuffers_int16, int16_t, 2, 2, INT16_C(0), GasBoil_Message)
__flatbuffers_build_scalar_field(2, flatbuffers_, GasBoil_Message_dataSize, flatbuffers_int16, int16_t, 2, 2, INT16_C(0), GasBoil_Message)
__flatbuffers_build_vector_field(3, flatbuffers_, GasBoil_Message_data, flatbuffers_int8, int8_t, GasBoil_Message)

static inline GasBoil_Message_ref_t GasBoil_Message_create(flatbuffers_builder_t *B __GasBoil_Message_formal_args)
{
    if (GasBoil_Message_start(B)
        || GasBoil_Message_data_add(B, v3)
        || GasBoil_Message_ack_add(B, v1)
        || GasBoil_Message_dataSize_add(B, v2)
        || GasBoil_Message_type_add(B, v0)) {
        return 0;
    }
    return GasBoil_Message_end(B);
}

static GasBoil_Message_ref_t GasBoil_Message_clone(flatbuffers_builder_t *B, GasBoil_Message_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (GasBoil_Message_start(B)
        || GasBoil_Message_data_pick(B, t)
        || GasBoil_Message_ack_pick(B, t)
        || GasBoil_Message_dataSize_pick(B, t)
        || GasBoil_Message_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, GasBoil_Message_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* MONSTER_BUILDER_H */
